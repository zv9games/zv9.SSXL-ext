pub struct GDExtensionInterface {
    #[doc = "@since 4.1\n @deprecated in Godot 4.5. Use `get_godot_version2` instead.\n\n Gets the Godot version that the GDExtension was loaded into.\n\n @param r_godot_version A pointer to the structure to write the version information into."]
    pub get_godot_version: crate::GDExtensionInterfaceGetGodotVersion, #[doc = "@since 4.5\n\n Gets the Godot version that the GDExtension was loaded into.\n\n @param r_godot_version A pointer to the structure to write the version information into."]
    pub get_godot_version2: crate::GDExtensionInterfaceGetGodotVersion2, #[doc = "@since 4.1\n\n Allocates memory.\n\n @param p_bytes The amount of memory to allocate in bytes.\n\n @return A pointer to the allocated memory, or NULL if unsuccessful."]
    pub mem_alloc: crate::GDExtensionInterfaceMemAlloc, #[doc = "@since 4.1\n\n Reallocates memory.\n\n @param p_ptr A pointer to the previously allocated memory.\n @param p_bytes The number of bytes to resize the memory block to.\n\n @return A pointer to the allocated memory, or NULL if unsuccessful."]
    pub mem_realloc: crate::GDExtensionInterfaceMemRealloc, #[doc = "@since 4.1\n\n Frees memory.\n\n @param p_ptr A pointer to the previously allocated memory."]
    pub mem_free: crate::GDExtensionInterfaceMemFree, #[doc = "@since 4.1\n\n Logs an error to Godot's built-in debugger and to the OS terminal.\n\n @param p_description The code triggering the error.\n @param p_function The function name where the error occurred.\n @param p_file The file where the error occurred.\n @param p_line The line where the error occurred.\n @param p_editor_notify Whether or not to notify the editor."]
    pub print_error: crate::GDExtensionInterfacePrintError, #[doc = "@since 4.1\n\n Logs an error with a message to Godot's built-in debugger and to the OS terminal.\n\n @param p_description The code triggering the error.\n @param p_message The message to show along with the error.\n @param p_function The function name where the error occurred.\n @param p_file The file where the error occurred.\n @param p_line The line where the error occurred.\n @param p_editor_notify Whether or not to notify the editor."]
    pub print_error_with_message: crate::GDExtensionInterfacePrintErrorWithMessage, #[doc = "@since 4.1\n\n Logs a warning to Godot's built-in debugger and to the OS terminal.\n\n @param p_description The code triggering the warning.\n @param p_function The function name where the warning occurred.\n @param p_file The file where the warning occurred.\n @param p_line The line where the warning occurred.\n @param p_editor_notify Whether or not to notify the editor."]
    pub print_warning: crate::GDExtensionInterfacePrintWarning, #[doc = "@since 4.1\n\n Logs a warning with a message to Godot's built-in debugger and to the OS terminal.\n\n @param p_description The code triggering the warning.\n @param p_message The message to show along with the warning.\n @param p_function The function name where the warning occurred.\n @param p_file The file where the warning occurred.\n @param p_line The line where the warning occurred.\n @param p_editor_notify Whether or not to notify the editor."]
    pub print_warning_with_message: crate::GDExtensionInterfacePrintWarningWithMessage, #[doc = "@since 4.1\n\n Logs a script error to Godot's built-in debugger and to the OS terminal.\n\n @param p_description The code triggering the error.\n @param p_function The function name where the error occurred.\n @param p_file The file where the error occurred.\n @param p_line The line where the error occurred.\n @param p_editor_notify Whether or not to notify the editor."]
    pub print_script_error: crate::GDExtensionInterfacePrintScriptError, #[doc = "@since 4.1\n\n Logs a script error with a message to Godot's built-in debugger and to the OS terminal.\n\n @param p_description The code triggering the error.\n @param p_message The message to show along with the error.\n @param p_function The function name where the error occurred.\n @param p_file The file where the error occurred.\n @param p_line The line where the error occurred.\n @param p_editor_notify Whether or not to notify the editor."]
    pub print_script_error_with_message: crate::GDExtensionInterfacePrintScriptErrorWithMessage, #[doc = "@since 4.1\n\n Gets the size of a native struct (ex. ObjectID) in bytes.\n\n @param p_name A pointer to a StringName identifying the struct name.\n\n @return The size in bytes."]
    pub get_native_struct_size: crate::GDExtensionInterfaceGetNativeStructSize, #[doc = "@since 4.1\n\n Copies one Variant into a another.\n\n @param r_dest A pointer to the destination Variant.\n @param p_src A pointer to the source Variant."]
    pub variant_new_copy: crate::GDExtensionInterfaceVariantNewCopy, #[doc = "@since 4.1\n\n Creates a new Variant containing nil.\n\n @param r_dest A pointer to the destination Variant."]
    pub variant_new_nil: crate::GDExtensionInterfaceVariantNewNil, #[doc = "@since 4.1\n\n Destroys a Variant.\n\n @param p_self A pointer to the Variant to destroy."]
    pub variant_destroy: crate::GDExtensionInterfaceVariantDestroy, #[doc = "@since 4.1\n\n Calls a method on a Variant.\n\n @param p_self A pointer to the Variant.\n @param p_method A pointer to a StringName identifying the method.\n @param p_args A pointer to a C array of Variant.\n @param p_argument_count The number of arguments.\n @param r_return A pointer a Variant which will be assigned the return value.\n @param r_error A pointer the structure which will hold error information.\n\n @see Variant::callp()"]
    pub variant_call: crate::GDExtensionInterfaceVariantCall, #[doc = "@since 4.1\n\n Calls a static method on a Variant.\n\n @param p_type The variant type.\n @param p_method A pointer to a StringName identifying the method.\n @param p_args A pointer to a C array of Variant.\n @param p_argument_count The number of arguments.\n @param r_return A pointer a Variant which will be assigned the return value.\n @param r_error A pointer the structure which will be updated with error information.\n\n @see Variant::call_static()"]
    pub variant_call_static: crate::GDExtensionInterfaceVariantCallStatic, #[doc = "@since 4.1\n\n Evaluate an operator on two Variants.\n\n @param p_op The operator to evaluate.\n @param p_a The first Variant.\n @param p_b The second Variant.\n @param r_return A pointer a Variant which will be assigned the return value.\n @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.\n\n @see Variant::evaluate()"]
    pub variant_evaluate: crate::GDExtensionInterfaceVariantEvaluate, #[doc = "@since 4.1\n\n Sets a key on a Variant to a value.\n\n @param p_self A pointer to the Variant.\n @param p_key A pointer to a Variant representing the key.\n @param p_value A pointer to a Variant representing the value.\n @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.\n\n @see Variant::set()"]
    pub variant_set: crate::GDExtensionInterfaceVariantSet, #[doc = "@since 4.1\n\n Sets a named key on a Variant to a value.\n\n @param p_self A pointer to the Variant.\n @param p_key A pointer to a StringName representing the key.\n @param p_value A pointer to a Variant representing the value.\n @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.\n\n @see Variant::set_named()"]
    pub variant_set_named: crate::GDExtensionInterfaceVariantSetNamed, #[doc = "@since 4.1\n\n Sets a keyed property on a Variant to a value.\n\n @param p_self A pointer to the Variant.\n @param p_key A pointer to a Variant representing the key.\n @param p_value A pointer to a Variant representing the value.\n @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.\n\n @see Variant::set_keyed()"]
    pub variant_set_keyed: crate::GDExtensionInterfaceVariantSetKeyed, #[doc = "@since 4.1\n\n Sets an index on a Variant to a value.\n\n @param p_self A pointer to the Variant.\n @param p_index The index.\n @param p_value A pointer to a Variant representing the value.\n @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.\n @param r_oob A pointer to a boolean which will be set to true if the index is out of bounds."]
    pub variant_set_indexed: crate::GDExtensionInterfaceVariantSetIndexed, #[doc = "@since 4.1\n\n Gets the value of a key from a Variant.\n\n @param p_self A pointer to the Variant.\n @param p_key A pointer to a Variant representing the key.\n @param r_ret A pointer to a Variant which will be assigned the value.\n @param r_valid A pointer to a boolean which will be set to false if the operation is invalid."]
    pub variant_get: crate::GDExtensionInterfaceVariantGet, #[doc = "@since 4.1\n\n Gets the value of a named key from a Variant.\n\n @param p_self A pointer to the Variant.\n @param p_key A pointer to a StringName representing the key.\n @param r_ret A pointer to a Variant which will be assigned the value.\n @param r_valid A pointer to a boolean which will be set to false if the operation is invalid."]
    pub variant_get_named: crate::GDExtensionInterfaceVariantGetNamed, #[doc = "@since 4.1\n\n Gets the value of a keyed property from a Variant.\n\n @param p_self A pointer to the Variant.\n @param p_key A pointer to a Variant representing the key.\n @param r_ret A pointer to a Variant which will be assigned the value.\n @param r_valid A pointer to a boolean which will be set to false if the operation is invalid."]
    pub variant_get_keyed: crate::GDExtensionInterfaceVariantGetKeyed, #[doc = "@since 4.1\n\n Gets the value of an index from a Variant.\n\n @param p_self A pointer to the Variant.\n @param p_index The index.\n @param r_ret A pointer to a Variant which will be assigned the value.\n @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.\n @param r_oob A pointer to a boolean which will be set to true if the index is out of bounds."]
    pub variant_get_indexed: crate::GDExtensionInterfaceVariantGetIndexed, #[doc = "@since 4.1\n\n Initializes an iterator over a Variant.\n\n @param p_self A pointer to the Variant.\n @param r_iter A pointer to a Variant which will be assigned the iterator.\n @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.\n\n @return true if the operation is valid; otherwise false.\n\n @see Variant::iter_init()"]
    pub variant_iter_init: crate::GDExtensionInterfaceVariantIterInit, #[doc = "@since 4.1\n\n Gets the next value for an iterator over a Variant.\n\n @param p_self A pointer to the Variant.\n @param r_iter A pointer to a Variant which will be assigned the iterator.\n @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.\n\n @return true if the operation is valid; otherwise false.\n\n @see Variant::iter_next()"]
    pub variant_iter_next: crate::GDExtensionInterfaceVariantIterNext, #[doc = "@since 4.1\n\n Gets the next value for an iterator over a Variant.\n\n @param p_self A pointer to the Variant.\n @param r_iter A pointer to a Variant which will be assigned the iterator.\n @param r_ret A pointer to a Variant which will be assigned false if the operation is invalid.\n @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.\n\n @see Variant::iter_get()"]
    pub variant_iter_get: crate::GDExtensionInterfaceVariantIterGet, #[doc = "@since 4.1\n\n Gets the hash of a Variant.\n\n @param p_self A pointer to the Variant.\n\n @return The hash value.\n\n @see Variant::hash()"]
    pub variant_hash: crate::GDExtensionInterfaceVariantHash, #[doc = "@since 4.1\n\n Gets the recursive hash of a Variant.\n\n @param p_self A pointer to the Variant.\n @param p_recursion_count The number of recursive loops so far.\n\n @return The hash value.\n\n @see Variant::recursive_hash()"]
    pub variant_recursive_hash: crate::GDExtensionInterfaceVariantRecursiveHash, #[doc = "@since 4.1\n\n Compares two Variants by their hash.\n\n @param p_self A pointer to the Variant.\n @param p_other A pointer to the other Variant to compare it to.\n\n @return The hash value.\n\n @see Variant::hash_compare()"]
    pub variant_hash_compare: crate::GDExtensionInterfaceVariantHashCompare, #[doc = "@since 4.1\n\n Converts a Variant to a boolean.\n\n @param p_self A pointer to the Variant.\n\n @return The boolean value of the Variant."]
    pub variant_booleanize: crate::GDExtensionInterfaceVariantBooleanize, #[doc = "@since 4.1\n\n Duplicates a Variant.\n\n @param p_self A pointer to the Variant.\n @param r_ret A pointer to a Variant to store the duplicated value.\n @param p_deep Whether or not to duplicate deeply (when supported by the Variant type)."]
    pub variant_duplicate: crate::GDExtensionInterfaceVariantDuplicate, #[doc = "@since 4.1\n\n Converts a Variant to a string.\n\n @param p_self A pointer to the Variant.\n @param r_ret A pointer to a String to store the resulting value."]
    pub variant_stringify: crate::GDExtensionInterfaceVariantStringify, #[doc = "@since 4.1\n\n Gets the type of a Variant.\n\n @param p_self A pointer to the Variant.\n\n @return The variant type."]
    pub variant_get_type: crate::GDExtensionInterfaceVariantGetType, #[doc = "@since 4.1\n\n Checks if a Variant has the given method.\n\n @param p_self A pointer to the Variant.\n @param p_method A pointer to a StringName with the method name.\n\n @return true if the variant has the given method; otherwise false."]
    pub variant_has_method: crate::GDExtensionInterfaceVariantHasMethod, #[doc = "@since 4.1\n\n Checks if a type of Variant has the given member.\n\n @param p_type The Variant type.\n @param p_member A pointer to a StringName with the member name.\n\n @return true if the variant has the given method; otherwise false."]
    pub variant_has_member: crate::GDExtensionInterfaceVariantHasMember, #[doc = "@since 4.1\n\n Checks if a Variant has a key.\n\n @param p_self A pointer to the Variant.\n @param p_key A pointer to a Variant representing the key.\n @param r_valid A pointer to a boolean which will be set to false if the key doesn't exist.\n\n @return true if the key exists; otherwise false."]
    pub variant_has_key: crate::GDExtensionInterfaceVariantHasKey, #[doc = "@since 4.4\n\n Gets the object instance ID from a variant of type GDEXTENSION_VARIANT_TYPE_OBJECT.\n\n If the variant isn't of type GDEXTENSION_VARIANT_TYPE_OBJECT, then zero will be returned.\n The instance ID will be returned even if the object is no longer valid - use `object_get_instance_by_id()` to check if the object is still valid.\n\n @param p_self A pointer to the Variant.\n\n @return The instance ID for the contained object."]
    pub variant_get_object_instance_id: crate::GDExtensionInterfaceVariantGetObjectInstanceId, #[doc = "@since 4.1\n\n Gets the name of a Variant type.\n\n @param p_type The Variant type.\n @param r_name A pointer to a String to store the Variant type name."]
    pub variant_get_type_name: crate::GDExtensionInterfaceVariantGetTypeName, #[doc = "@since 4.1\n\n Checks if Variants can be converted from one type to another.\n\n @param p_from The Variant type to convert from.\n @param p_to The Variant type to convert to.\n\n @return true if the conversion is possible; otherwise false."]
    pub variant_can_convert: crate::GDExtensionInterfaceVariantCanConvert, #[doc = "@since 4.1\n\n Checks if Variant can be converted from one type to another using stricter rules.\n\n @param p_from The Variant type to convert from.\n @param p_to The Variant type to convert to.\n\n @return true if the conversion is possible; otherwise false."]
    pub variant_can_convert_strict: crate::GDExtensionInterfaceVariantCanConvertStrict, #[doc = "@since 4.1\n\n Gets a pointer to a function that can create a Variant of the given type from a raw value.\n\n @param p_type The Variant type.\n\n @return A pointer to a function that can create a Variant of the given type from a raw value."]
    pub get_variant_from_type_constructor: crate::GDExtensionInterfaceGetVariantFromTypeConstructor, #[doc = "@since 4.1\n\n Gets a pointer to a function that can get the raw value from a Variant of the given type.\n\n @param p_type The Variant type.\n\n @return A pointer to a function that can get the raw value from a Variant of the given type."]
    pub get_variant_to_type_constructor: crate::GDExtensionInterfaceGetVariantToTypeConstructor, #[doc = "@since 4.4\n\n Provides a function pointer for retrieving a pointer to a variant's internal value.\n Access to a variant's internal value can be used to modify it in-place, or to retrieve its value without the overhead of variant conversion functions.\n It is recommended to cache the getter for all variant types in a function table to avoid retrieval overhead upon use.\n\n @note Each function assumes the variant's type has already been determined and matches the function.\n Invoking the function with a variant of a mismatched type has undefined behavior, and may lead to a segmentation fault.\n\n @param p_type The Variant type.\n\n @return A pointer to a type-specific function that returns a pointer to the internal value of a variant. Check the implementation of this function (gdextension_variant_get_ptr_internal_getter) for pointee type info of each variant type."]
    pub variant_get_ptr_internal_getter: crate::GDExtensionInterfaceGetVariantGetInternalPtrFunc, #[doc = "@since 4.1\n\n Gets a pointer to a function that can evaluate the given Variant operator on the given Variant types.\n\n @param p_operator The variant operator.\n @param p_type_a The type of the first Variant.\n @param p_type_b The type of the second Variant.\n\n @return A pointer to a function that can evaluate the given Variant operator on the given Variant types."]
    pub variant_get_ptr_operator_evaluator: crate::GDExtensionInterfaceVariantGetPtrOperatorEvaluator, #[doc = "@since 4.1\n\n Gets a pointer to a function that can call a builtin method on a type of Variant.\n\n @param p_type The Variant type.\n @param p_method A pointer to a StringName with the method name.\n @param p_hash A hash representing the method signature.\n\n @return A pointer to a function that can call a builtin method on a type of Variant."]
    pub variant_get_ptr_builtin_method: crate::GDExtensionInterfaceVariantGetPtrBuiltinMethod, #[doc = "@since 4.1\n\n Gets a pointer to a function that can call one of the constructors for a type of Variant.\n\n @param p_type The Variant type.\n @param p_constructor The index of the constructor.\n\n @return A pointer to a function that can call one of the constructors for a type of Variant."]
    pub variant_get_ptr_constructor: crate::GDExtensionInterfaceVariantGetPtrConstructor, #[doc = "@since 4.1\n\n Gets a pointer to a function than can call the destructor for a type of Variant.\n\n @param p_type The Variant type.\n\n @return A pointer to a function than can call the destructor for a type of Variant."]
    pub variant_get_ptr_destructor: crate::GDExtensionInterfaceVariantGetPtrDestructor, #[doc = "@since 4.1\n\n Constructs a Variant of the given type, using the first constructor that matches the given arguments.\n\n @param p_type The Variant type.\n @param r_base A pointer to a Variant to store the constructed value.\n @param p_args A pointer to a C array of Variant pointers representing the arguments for the constructor.\n @param p_argument_count The number of arguments to pass to the constructor.\n @param r_error A pointer the structure which will be updated with error information."]
    pub variant_construct: crate::GDExtensionInterfaceVariantConstruct, #[doc = "@since 4.1\n\n Gets a pointer to a function that can call a member's setter on the given Variant type.\n\n @param p_type The Variant type.\n @param p_member A pointer to a StringName with the member name.\n\n @return A pointer to a function that can call a member's setter on the given Variant type."]
    pub variant_get_ptr_setter: crate::GDExtensionInterfaceVariantGetPtrSetter, #[doc = "@since 4.1\n\n Gets a pointer to a function that can call a member's getter on the given Variant type.\n\n @param p_type The Variant type.\n @param p_member A pointer to a StringName with the member name.\n\n @return A pointer to a function that can call a member's getter on the given Variant type."]
    pub variant_get_ptr_getter: crate::GDExtensionInterfaceVariantGetPtrGetter, #[doc = "@since 4.1\n\n Gets a pointer to a function that can set an index on the given Variant type.\n\n @param p_type The Variant type.\n\n @return A pointer to a function that can set an index on the given Variant type."]
    pub variant_get_ptr_indexed_setter: crate::GDExtensionInterfaceVariantGetPtrIndexedSetter, #[doc = "@since 4.1\n\n Gets a pointer to a function that can get an index on the given Variant type.\n\n @param p_type The Variant type.\n\n @return A pointer to a function that can get an index on the given Variant type."]
    pub variant_get_ptr_indexed_getter: crate::GDExtensionInterfaceVariantGetPtrIndexedGetter, #[doc = "@since 4.1\n\n Gets a pointer to a function that can set a key on the given Variant type.\n\n @param p_type The Variant type.\n\n @return A pointer to a function that can set a key on the given Variant type."]
    pub variant_get_ptr_keyed_setter: crate::GDExtensionInterfaceVariantGetPtrKeyedSetter, #[doc = "@since 4.1\n\n Gets a pointer to a function that can get a key on the given Variant type.\n\n @param p_type The Variant type.\n\n @return A pointer to a function that can get a key on the given Variant type."]
    pub variant_get_ptr_keyed_getter: crate::GDExtensionInterfaceVariantGetPtrKeyedGetter, #[doc = "@since 4.1\n\n Gets a pointer to a function that can check a key on the given Variant type.\n\n @param p_type The Variant type.\n\n @return A pointer to a function that can check a key on the given Variant type."]
    pub variant_get_ptr_keyed_checker: crate::GDExtensionInterfaceVariantGetPtrKeyedChecker, #[doc = "@since 4.1\n\n Gets the value of a constant from the given Variant type.\n\n @param p_type The Variant type.\n @param p_constant A pointer to a StringName with the constant name.\n @param r_ret A pointer to a Variant to store the value."]
    pub variant_get_constant_value: crate::GDExtensionInterfaceVariantGetConstantValue, #[doc = "@since 4.1\n\n Gets a pointer to a function that can call a Variant utility function.\n\n @param p_function A pointer to a StringName with the function name.\n @param p_hash A hash representing the function signature.\n\n @return A pointer to a function that can call a Variant utility function."]
    pub variant_get_ptr_utility_function: crate::GDExtensionInterfaceVariantGetPtrUtilityFunction, #[doc = "@since 4.1\n\n Creates a String from a Latin-1 encoded C string.\n\n @param r_dest A pointer to a Variant to hold the newly created String.\n @param p_contents A pointer to a Latin-1 encoded C string (null terminated)."]
    pub string_new_with_latin1_chars: crate::GDExtensionInterfaceStringNewWithLatin1Chars, #[doc = "@since 4.1\n\n Creates a String from a UTF-8 encoded C string.\n\n @param r_dest A pointer to a Variant to hold the newly created String.\n @param p_contents A pointer to a UTF-8 encoded C string (null terminated)."]
    pub string_new_with_utf8_chars: crate::GDExtensionInterfaceStringNewWithUtf8Chars, #[doc = "@since 4.1\n\n Creates a String from a UTF-16 encoded C string.\n\n @param r_dest A pointer to a Variant to hold the newly created String.\n @param p_contents A pointer to a UTF-16 encoded C string (null terminated)."]
    pub string_new_with_utf16_chars: crate::GDExtensionInterfaceStringNewWithUtf16Chars, #[doc = "@since 4.1\n\n Creates a String from a UTF-32 encoded C string.\n\n @param r_dest A pointer to a Variant to hold the newly created String.\n @param p_contents A pointer to a UTF-32 encoded C string (null terminated)."]
    pub string_new_with_utf32_chars: crate::GDExtensionInterfaceStringNewWithUtf32Chars, #[doc = "@since 4.1\n\n Creates a String from a wide C string.\n\n @param r_dest A pointer to a Variant to hold the newly created String.\n @param p_contents A pointer to a wide C string (null terminated)."]
    pub string_new_with_wide_chars: crate::GDExtensionInterfaceStringNewWithWideChars, #[doc = "@since 4.1\n\n Creates a String from a Latin-1 encoded C string with the given length.\n\n @param r_dest A pointer to a Variant to hold the newly created String.\n @param p_contents A pointer to a Latin-1 encoded C string.\n @param p_size The number of characters (= number of bytes)."]
    pub string_new_with_latin1_chars_and_len: crate::GDExtensionInterfaceStringNewWithLatin1CharsAndLen, #[doc = "@since 4.1\n @deprecated in Godot 4.3. Use `string_new_with_utf8_chars_and_len2` instead.\n\n Creates a String from a UTF-8 encoded C string with the given length.\n\n @param r_dest A pointer to a Variant to hold the newly created String.\n @param p_contents A pointer to a UTF-8 encoded C string.\n @param p_size The number of bytes (not code units)."]
    pub string_new_with_utf8_chars_and_len: crate::GDExtensionInterfaceStringNewWithUtf8CharsAndLen, #[doc = "@since 4.3\n\n Creates a String from a UTF-8 encoded C string with the given length.\n\n @param r_dest A pointer to a Variant to hold the newly created String.\n @param p_contents A pointer to a UTF-8 encoded C string.\n @param p_size The number of bytes (not code units).\n\n @return Error code signifying if the operation successful."]
    pub string_new_with_utf8_chars_and_len2: crate::GDExtensionInterfaceStringNewWithUtf8CharsAndLen2, #[doc = "@since 4.1\n @deprecated in Godot 4.3. Use `string_new_with_utf16_chars_and_len2` instead.\n\n Creates a String from a UTF-16 encoded C string with the given length.\n\n @param r_dest A pointer to a Variant to hold the newly created String.\n @param p_contents A pointer to a UTF-16 encoded C string.\n @param p_char_count The number of characters (not bytes)."]
    pub string_new_with_utf16_chars_and_len: crate::GDExtensionInterfaceStringNewWithUtf16CharsAndLen, #[doc = "@since 4.3\n\n Creates a String from a UTF-16 encoded C string with the given length.\n\n @param r_dest A pointer to a Variant to hold the newly created String.\n @param p_contents A pointer to a UTF-16 encoded C string.\n @param p_char_count The number of characters (not bytes).\n @param p_default_little_endian If true, UTF-16 use little endian.\n\n @return Error code signifying if the operation successful."]
    pub string_new_with_utf16_chars_and_len2: crate::GDExtensionInterfaceStringNewWithUtf16CharsAndLen2, #[doc = "@since 4.1\n\n Creates a String from a UTF-32 encoded C string with the given length.\n\n @param r_dest A pointer to a Variant to hold the newly created String.\n @param p_contents A pointer to a UTF-32 encoded C string.\n @param p_char_count The number of characters (not bytes)."]
    pub string_new_with_utf32_chars_and_len: crate::GDExtensionInterfaceStringNewWithUtf32CharsAndLen, #[doc = "@since 4.1\n\n Creates a String from a wide C string with the given length.\n\n @param r_dest A pointer to a Variant to hold the newly created String.\n @param p_contents A pointer to a wide C string.\n @param p_char_count The number of characters (not bytes)."]
    pub string_new_with_wide_chars_and_len: crate::GDExtensionInterfaceStringNewWithWideCharsAndLen, #[doc = "@since 4.1\n\n Converts a String to a Latin-1 encoded C string.\n\n It doesn't write a null terminator.\n\n @param p_self A pointer to the String.\n @param r_text A pointer to the buffer to hold the resulting data. If NULL is passed in, only the length will be computed.\n @param p_max_write_length The maximum number of characters that can be written to r_text. It has no affect on the return value.\n\n @return The resulting encoded string length in characters (not bytes), not including a null terminator."]
    pub string_to_latin1_chars: crate::GDExtensionInterfaceStringToLatin1Chars, #[doc = "@since 4.1\n\n Converts a String to a UTF-8 encoded C string.\n\n It doesn't write a null terminator.\n\n @param p_self A pointer to the String.\n @param r_text A pointer to the buffer to hold the resulting data. If NULL is passed in, only the length will be computed.\n @param p_max_write_length The maximum number of characters that can be written to r_text. It has no affect on the return value.\n\n @return The resulting encoded string length in characters (not bytes), not including a null terminator."]
    pub string_to_utf8_chars: crate::GDExtensionInterfaceStringToUtf8Chars, #[doc = "@since 4.1\n\n Converts a String to a UTF-16 encoded C string.\n\n It doesn't write a null terminator.\n\n @param p_self A pointer to the String.\n @param r_text A pointer to the buffer to hold the resulting data. If NULL is passed in, only the length will be computed.\n @param p_max_write_length The maximum number of characters that can be written to r_text. It has no affect on the return value.\n\n @return The resulting encoded string length in characters (not bytes), not including a null terminator."]
    pub string_to_utf16_chars: crate::GDExtensionInterfaceStringToUtf16Chars, #[doc = "@since 4.1\n\n Converts a String to a UTF-32 encoded C string.\n\n It doesn't write a null terminator.\n\n @param p_self A pointer to the String.\n @param r_text A pointer to the buffer to hold the resulting data. If NULL is passed in, only the length will be computed.\n @param p_max_write_length The maximum number of characters that can be written to r_text. It has no affect on the return value.\n\n @return The resulting encoded string length in characters (not bytes), not including a null terminator."]
    pub string_to_utf32_chars: crate::GDExtensionInterfaceStringToUtf32Chars, #[doc = "@since 4.1\n\n Converts a String to a wide C string.\n\n It doesn't write a null terminator.\n\n @param p_self A pointer to the String.\n @param r_text A pointer to the buffer to hold the resulting data. If NULL is passed in, only the length will be computed.\n @param p_max_write_length The maximum number of characters that can be written to r_text. It has no affect on the return value.\n\n @return The resulting encoded string length in characters (not bytes), not including a null terminator."]
    pub string_to_wide_chars: crate::GDExtensionInterfaceStringToWideChars, #[doc = "@since 4.1\n\n Gets a pointer to the character at the given index from a String.\n\n @param p_self A pointer to the String.\n @param p_index The index.\n\n @return A pointer to the requested character."]
    pub string_operator_index: crate::GDExtensionInterfaceStringOperatorIndex, #[doc = "@since 4.1\n\n Gets a const pointer to the character at the given index from a String.\n\n @param p_self A pointer to the String.\n @param p_index The index.\n\n @return A const pointer to the requested character."]
    pub string_operator_index_const: crate::GDExtensionInterfaceStringOperatorIndexConst, #[doc = "@since 4.1\n\n Appends another String to a String.\n\n @param p_self A pointer to the String.\n @param p_b A pointer to the other String to append."]
    pub string_operator_plus_eq_string: crate::GDExtensionInterfaceStringOperatorPlusEqString, #[doc = "@since 4.1\n\n Appends a character to a String.\n\n @param p_self A pointer to the String.\n @param p_b A pointer to the character to append."]
    pub string_operator_plus_eq_char: crate::GDExtensionInterfaceStringOperatorPlusEqChar, #[doc = "@since 4.1\n\n Appends a Latin-1 encoded C string to a String.\n\n @param p_self A pointer to the String.\n @param p_b A pointer to a Latin-1 encoded C string (null terminated)."]
    pub string_operator_plus_eq_cstr: crate::GDExtensionInterfaceStringOperatorPlusEqCstr, #[doc = "@since 4.1\n\n Appends a wide C string to a String.\n\n @param p_self A pointer to the String.\n @param p_b A pointer to a wide C string (null terminated)."]
    pub string_operator_plus_eq_wcstr: crate::GDExtensionInterfaceStringOperatorPlusEqWcstr, #[doc = "@since 4.1\n\n Appends a UTF-32 encoded C string to a String.\n\n @param p_self A pointer to the String.\n @param p_b A pointer to a UTF-32 encoded C string (null terminated)."]
    pub string_operator_plus_eq_c32str: crate::GDExtensionInterfaceStringOperatorPlusEqC32str, #[doc = "@since 4.2\n\n Resizes the underlying string data to the given number of characters.\n\n Space needs to be allocated for the null terminating character ('\\0') which\n also must be added manually, in order for all string functions to work correctly.\n\n Warning: This is an error-prone operation - only use it if there's no other\n efficient way to accomplish your goal.\n\n @param p_self A pointer to the String.\n @param p_resize The new length for the String.\n\n @return Error code signifying if the operation successful."]
    pub string_resize: crate::GDExtensionInterfaceStringResize, #[doc = "@since 4.2\n\n Creates a StringName from a Latin-1 encoded C string.\n\n If `p_is_static` is true, then:\n - The StringName will reuse the `p_contents` buffer instead of copying it.\n   You must guarantee that the buffer remains valid for the duration of the application (e.g. string literal).\n - You must not call a destructor for this StringName. Incrementing the initial reference once should achieve this.\n\n `p_is_static` is purely an optimization and can easily introduce undefined behavior if used wrong. In case of doubt, set it to false.\n\n @param r_dest A pointer to uninitialized storage, into which the newly created StringName is constructed.\n @param p_contents A pointer to a C string (null terminated and Latin-1 or ASCII encoded).\n @param p_is_static Whether the StringName reuses the buffer directly (see above)."]
    pub string_name_new_with_latin1_chars: crate::GDExtensionInterfaceStringNameNewWithLatin1Chars, #[doc = "@since 4.2\n\n Creates a StringName from a UTF-8 encoded C string.\n\n @param r_dest A pointer to uninitialized storage, into which the newly created StringName is constructed.\n @param p_contents A pointer to a C string (null terminated and UTF-8 encoded)."]
    pub string_name_new_with_utf8_chars: crate::GDExtensionInterfaceStringNameNewWithUtf8Chars, #[doc = "@since 4.2\n\n Creates a StringName from a UTF-8 encoded string with a given number of characters.\n\n @param r_dest A pointer to uninitialized storage, into which the newly created StringName is constructed.\n @param p_contents A pointer to a C string (null terminated and UTF-8 encoded).\n @param p_size The number of bytes (not UTF-8 code points)."]
    pub string_name_new_with_utf8_chars_and_len: crate::GDExtensionInterfaceStringNameNewWithUtf8CharsAndLen, #[doc = "@since 4.1\n\n Opens a raw XML buffer on an XMLParser instance.\n\n @param p_instance A pointer to an XMLParser object.\n @param p_buffer A pointer to the buffer.\n @param p_size The size of the buffer.\n\n @return A Godot error code (ex. OK, ERR_INVALID_DATA, etc).\n\n @see XMLParser::open_buffer()"]
    pub xml_parser_open_buffer: crate::GDExtensionInterfaceXmlParserOpenBuffer, #[doc = "@since 4.1\n\n Stores the given buffer using an instance of FileAccess.\n\n @param p_instance A pointer to a FileAccess object.\n @param p_src A pointer to the buffer.\n @param p_length The size of the buffer.\n\n @see FileAccess::store_buffer()"]
    pub file_access_store_buffer: crate::GDExtensionInterfaceFileAccessStoreBuffer, #[doc = "@since 4.1\n\n Reads the next p_length bytes into the given buffer using an instance of FileAccess.\n\n @param p_instance A pointer to a FileAccess object.\n @param p_dst A pointer to the buffer to store the data.\n @param p_length The requested number of bytes to read.\n\n @return The actual number of bytes read (may be less than requested)."]
    pub file_access_get_buffer: crate::GDExtensionInterfaceFileAccessGetBuffer, #[doc = "@since 4.3\n\n Returns writable pointer to internal Image buffer.\n\n @param p_instance A pointer to a Image object.\n\n @return Pointer to internal Image buffer.\n\n @see Image::ptrw()"]
    pub image_ptrw: crate::GDExtensionInterfaceImagePtrw, #[doc = "@since 4.3\n\n Returns read only pointer to internal Image buffer.\n\n @param p_instance A pointer to a Image object.\n\n @return Pointer to internal Image buffer.\n\n @see Image::ptr()"]
    pub image_ptr: crate::GDExtensionInterfaceImagePtr, #[doc = "@since 4.1\n\n Adds a group task to an instance of WorkerThreadPool.\n\n @param p_instance A pointer to a WorkerThreadPool object.\n @param p_func A pointer to a function to run in the thread pool.\n @param p_userdata A pointer to arbitrary data which will be passed to p_func.\n @param p_elements The number of element needed in the group.\n @param p_tasks The number of tasks needed in the group.\n @param p_high_priority Whether or not this is a high priority task.\n @param p_description A pointer to a String with the task description.\n\n @return The task group ID.\n\n @see WorkerThreadPool::add_group_task()"]
    pub worker_thread_pool_add_native_group_task: crate::GDExtensionInterfaceWorkerThreadPoolAddNativeGroupTask, #[doc = "@since 4.1\n\n Adds a task to an instance of WorkerThreadPool.\n\n @param p_instance A pointer to a WorkerThreadPool object.\n @param p_func A pointer to a function to run in the thread pool.\n @param p_userdata A pointer to arbitrary data which will be passed to p_func.\n @param p_high_priority Whether or not this is a high priority task.\n @param p_description A pointer to a String with the task description.\n\n @return The task ID."]
    pub worker_thread_pool_add_native_task: crate::GDExtensionInterfaceWorkerThreadPoolAddNativeTask, #[doc = "@since 4.1\n\n Gets a pointer to a byte in a PackedByteArray.\n\n @param p_self A pointer to a PackedByteArray object.\n @param p_index The index of the byte to get.\n\n @return A pointer to the requested byte."]
    pub packed_byte_array_operator_index: crate::GDExtensionInterfacePackedByteArrayOperatorIndex, #[doc = "@since 4.1\n\n Gets a const pointer to a byte in a PackedByteArray.\n\n @param p_self A const pointer to a PackedByteArray object.\n @param p_index The index of the byte to get.\n\n @return A const pointer to the requested byte."]
    pub packed_byte_array_operator_index_const: crate::GDExtensionInterfacePackedByteArrayOperatorIndexConst, #[doc = "@since 4.1\n\n Gets a pointer to a 32-bit float in a PackedFloat32Array.\n\n @param p_self A pointer to a PackedFloat32Array object.\n @param p_index The index of the float to get.\n\n @return A pointer to the requested 32-bit float."]
    pub packed_float32_array_operator_index: crate::GDExtensionInterfacePackedFloat32ArrayOperatorIndex, #[doc = "@since 4.1\n\n Gets a const pointer to a 32-bit float in a PackedFloat32Array.\n\n @param p_self A const pointer to a PackedFloat32Array object.\n @param p_index The index of the float to get.\n\n @return A const pointer to the requested 32-bit float."]
    pub packed_float32_array_operator_index_const: crate::GDExtensionInterfacePackedFloat32ArrayOperatorIndexConst, #[doc = "@since 4.1\n\n Gets a pointer to a 64-bit float in a PackedFloat64Array.\n\n @param p_self A pointer to a PackedFloat64Array object.\n @param p_index The index of the float to get.\n\n @return A pointer to the requested 64-bit float."]
    pub packed_float64_array_operator_index: crate::GDExtensionInterfacePackedFloat64ArrayOperatorIndex, #[doc = "@since 4.1\n\n Gets a const pointer to a 64-bit float in a PackedFloat64Array.\n\n @param p_self A const pointer to a PackedFloat64Array object.\n @param p_index The index of the float to get.\n\n @return A const pointer to the requested 64-bit float."]
    pub packed_float64_array_operator_index_const: crate::GDExtensionInterfacePackedFloat64ArrayOperatorIndexConst, #[doc = "@since 4.1\n\n Gets a pointer to a 32-bit integer in a PackedInt32Array.\n\n @param p_self A pointer to a PackedInt32Array object.\n @param p_index The index of the integer to get.\n\n @return A pointer to the requested 32-bit integer."]
    pub packed_int32_array_operator_index: crate::GDExtensionInterfacePackedInt32ArrayOperatorIndex, #[doc = "@since 4.1\n\n Gets a const pointer to a 32-bit integer in a PackedInt32Array.\n\n @param p_self A const pointer to a PackedInt32Array object.\n @param p_index The index of the integer to get.\n\n @return A const pointer to the requested 32-bit integer."]
    pub packed_int32_array_operator_index_const: crate::GDExtensionInterfacePackedInt32ArrayOperatorIndexConst, #[doc = "@since 4.1\n\n Gets a pointer to a 64-bit integer in a PackedInt64Array.\n\n @param p_self A pointer to a PackedInt64Array object.\n @param p_index The index of the integer to get.\n\n @return A pointer to the requested 64-bit integer."]
    pub packed_int64_array_operator_index: crate::GDExtensionInterfacePackedInt64ArrayOperatorIndex, #[doc = "@since 4.1\n\n Gets a const pointer to a 64-bit integer in a PackedInt64Array.\n\n @param p_self A const pointer to a PackedInt64Array object.\n @param p_index The index of the integer to get.\n\n @return A const pointer to the requested 64-bit integer."]
    pub packed_int64_array_operator_index_const: crate::GDExtensionInterfacePackedInt64ArrayOperatorIndexConst, #[doc = "@since 4.1\n\n Gets a pointer to a string in a PackedStringArray.\n\n @param p_self A pointer to a PackedStringArray object.\n @param p_index The index of the String to get.\n\n @return A pointer to the requested String."]
    pub packed_string_array_operator_index: crate::GDExtensionInterfacePackedStringArrayOperatorIndex, #[doc = "@since 4.1\n\n Gets a const pointer to a string in a PackedStringArray.\n\n @param p_self A const pointer to a PackedStringArray object.\n @param p_index The index of the String to get.\n\n @return A const pointer to the requested String."]
    pub packed_string_array_operator_index_const: crate::GDExtensionInterfacePackedStringArrayOperatorIndexConst, #[doc = "@since 4.1\n\n Gets a pointer to a Vector2 in a PackedVector2Array.\n\n @param p_self A pointer to a PackedVector2Array object.\n @param p_index The index of the Vector2 to get.\n\n @return A pointer to the requested Vector2."]
    pub packed_vector2_array_operator_index: crate::GDExtensionInterfacePackedVector2ArrayOperatorIndex, #[doc = "@since 4.1\n\n Gets a const pointer to a Vector2 in a PackedVector2Array.\n\n @param p_self A const pointer to a PackedVector2Array object.\n @param p_index The index of the Vector2 to get.\n\n @return A const pointer to the requested Vector2."]
    pub packed_vector2_array_operator_index_const: crate::GDExtensionInterfacePackedVector2ArrayOperatorIndexConst, #[doc = "@since 4.1\n\n Gets a pointer to a Vector3 in a PackedVector3Array.\n\n @param p_self A pointer to a PackedVector3Array object.\n @param p_index The index of the Vector3 to get.\n\n @return A pointer to the requested Vector3."]
    pub packed_vector3_array_operator_index: crate::GDExtensionInterfacePackedVector3ArrayOperatorIndex, #[doc = "@since 4.1\n\n Gets a const pointer to a Vector3 in a PackedVector3Array.\n\n @param p_self A const pointer to a PackedVector3Array object.\n @param p_index The index of the Vector3 to get.\n\n @return A const pointer to the requested Vector3."]
    pub packed_vector3_array_operator_index_const: crate::GDExtensionInterfacePackedVector3ArrayOperatorIndexConst, #[doc = "@since 4.3\n\n Gets a pointer to a Vector4 in a PackedVector4Array.\n\n @param p_self A pointer to a PackedVector4Array object.\n @param p_index The index of the Vector4 to get.\n\n @return A pointer to the requested Vector4."]
    pub packed_vector4_array_operator_index: crate::GDExtensionInterfacePackedVector4ArrayOperatorIndex, #[doc = "@since 4.3\n\n Gets a const pointer to a Vector4 in a PackedVector4Array.\n\n @param p_self A const pointer to a PackedVector4Array object.\n @param p_index The index of the Vector4 to get.\n\n @return A const pointer to the requested Vector4."]
    pub packed_vector4_array_operator_index_const: crate::GDExtensionInterfacePackedVector4ArrayOperatorIndexConst, #[doc = "@since 4.1\n\n Gets a pointer to a color in a PackedColorArray.\n\n @param p_self A pointer to a PackedColorArray object.\n @param p_index The index of the Color to get.\n\n @return A pointer to the requested Color."]
    pub packed_color_array_operator_index: crate::GDExtensionInterfacePackedColorArrayOperatorIndex, #[doc = "@since 4.1\n\n Gets a const pointer to a color in a PackedColorArray.\n\n @param p_self A const pointer to a PackedColorArray object.\n @param p_index The index of the Color to get.\n\n @return A const pointer to the requested Color."]
    pub packed_color_array_operator_index_const: crate::GDExtensionInterfacePackedColorArrayOperatorIndexConst, #[doc = "@since 4.1\n\n Gets a pointer to a Variant in an Array.\n\n @param p_self A pointer to an Array object.\n @param p_index The index of the Variant to get.\n\n @return A pointer to the requested Variant."]
    pub array_operator_index: crate::GDExtensionInterfaceArrayOperatorIndex, #[doc = "@since 4.1\n\n Gets a const pointer to a Variant in an Array.\n\n @param p_self A const pointer to an Array object.\n @param p_index The index of the Variant to get.\n\n @return A const pointer to the requested Variant."]
    pub array_operator_index_const: crate::GDExtensionInterfaceArrayOperatorIndexConst, #[doc = "@since 4.1\n @deprecated in Godot 4.5. use `Array::operator=` instead.\n\n Sets an Array to be a reference to another Array object.\n\n @param p_self A pointer to the Array object to update.\n @param p_from A pointer to the Array object to reference."]
    pub array_ref: crate::GDExtensionInterfaceArrayRef, #[doc = "@since 4.1\n\n Makes an Array into a typed Array.\n\n @param p_self A pointer to the Array.\n @param p_type The type of Variant the Array will store.\n @param p_class_name A pointer to a StringName with the name of the object (if p_type is GDEXTENSION_VARIANT_TYPE_OBJECT).\n @param p_script A pointer to a Script object (if p_type is GDEXTENSION_VARIANT_TYPE_OBJECT and the base class is extended by a script)."]
    pub array_set_typed: crate::GDExtensionInterfaceArraySetTyped, #[doc = "@since 4.1\n\n Gets a pointer to a Variant in a Dictionary with the given key.\n\n @param p_self A pointer to a Dictionary object.\n @param p_key A pointer to a Variant representing the key.\n\n @return A pointer to a Variant representing the value at the given key."]
    pub dictionary_operator_index: crate::GDExtensionInterfaceDictionaryOperatorIndex, #[doc = "@since 4.1\n\n Gets a const pointer to a Variant in a Dictionary with the given key.\n\n @param p_self A const pointer to a Dictionary object.\n @param p_key A pointer to a Variant representing the key.\n\n @return A const pointer to a Variant representing the value at the given key."]
    pub dictionary_operator_index_const: crate::GDExtensionInterfaceDictionaryOperatorIndexConst, #[doc = "@since 4.4\n\n Makes a Dictionary into a typed Dictionary.\n\n @param p_self A pointer to the Dictionary.\n @param p_key_type The type of Variant the Dictionary key will store.\n @param p_key_class_name A pointer to a StringName with the name of the object (if p_key_type is GDEXTENSION_VARIANT_TYPE_OBJECT).\n @param p_key_script A pointer to a Script object (if p_key_type is GDEXTENSION_VARIANT_TYPE_OBJECT and the base class is extended by a script).\n @param p_value_type The type of Variant the Dictionary value will store.\n @param p_value_class_name A pointer to a StringName with the name of the object (if p_value_type is GDEXTENSION_VARIANT_TYPE_OBJECT).\n @param p_value_script A pointer to a Script object (if p_value_type is GDEXTENSION_VARIANT_TYPE_OBJECT and the base class is extended by a script)."]
    pub dictionary_set_typed: crate::GDExtensionInterfaceDictionarySetTyped, #[doc = "@since 4.1\n\n Calls a method on an Object.\n\n @param p_method_bind A pointer to the MethodBind representing the method on the Object's class.\n @param p_instance A pointer to the Object.\n @param p_args A pointer to a C array of Variants representing the arguments.\n @param p_arg_count The number of arguments.\n @param r_ret A pointer to Variant which will receive the return value.\n @param r_error A pointer to a GDExtensionCallError struct that will receive error information."]
    pub object_method_bind_call: crate::GDExtensionInterfaceObjectMethodBindCall, #[doc = "@since 4.1\n\n Calls a method on an Object (using a \"ptrcall\").\n\n @param p_method_bind A pointer to the MethodBind representing the method on the Object's class.\n @param p_instance A pointer to the Object.\n @param p_args A pointer to a C array representing the arguments.\n @param r_ret A pointer to the Object that will receive the return value."]
    pub object_method_bind_ptrcall: crate::GDExtensionInterfaceObjectMethodBindPtrcall, #[doc = "@since 4.1\n\n Destroys an Object.\n\n @param p_o A pointer to the Object."]
    pub object_destroy: crate::GDExtensionInterfaceObjectDestroy, #[doc = "@since 4.1\n\n Gets a global singleton by name.\n\n @param p_name A pointer to a StringName with the singleton name.\n\n @return A pointer to the singleton Object."]
    pub global_get_singleton: crate::GDExtensionInterfaceGlobalGetSingleton, #[doc = "@since 4.1\n\n Gets a pointer representing an Object's instance binding.\n\n @param p_o A pointer to the Object.\n @param p_token A token the library received by the GDExtension's entry point function.\n @param p_callbacks A pointer to a GDExtensionInstanceBindingCallbacks struct.\n\n @return A pointer to the instance binding."]
    pub object_get_instance_binding: crate::GDExtensionInterfaceObjectGetInstanceBinding, #[doc = "@since 4.1\n\n Sets an Object's instance binding.\n\n @param p_o A pointer to the Object.\n @param p_token A token the library received by the GDExtension's entry point function.\n @param p_binding A pointer to the instance binding.\n @param p_callbacks A pointer to a GDExtensionInstanceBindingCallbacks struct."]
    pub object_set_instance_binding: crate::GDExtensionInterfaceObjectSetInstanceBinding, #[doc = "@since 4.2\n\n Free an Object's instance binding.\n\n @param p_o A pointer to the Object.\n @param p_token A token the library received by the GDExtension's entry point function."]
    pub object_free_instance_binding: crate::GDExtensionInterfaceObjectFreeInstanceBinding, #[doc = "@since 4.1\n\n Sets an extension class instance on a Object.\n\n `p_classname` should be a registered extension class and should extend the `p_o` Object's class.\n\n @param p_o A pointer to the Object.\n @param p_classname A pointer to a StringName with the registered extension class's name.\n @param p_instance A pointer to the extension class instance."]
    pub object_set_instance: crate::GDExtensionInterfaceObjectSetInstance, #[doc = "@since 4.1\n\n Gets the class name of an Object.\n\n If the GDExtension wraps the Godot object in an abstraction specific to its class, this is the\n function that should be used to determine which wrapper to use.\n\n @param p_object A pointer to the Object.\n @param p_library A pointer the library received by the GDExtension's entry point function.\n @param r_class_name A pointer to a String to receive the class name.\n\n @return true if successful in getting the class name; otherwise false."]
    pub object_get_class_name: crate::GDExtensionInterfaceObjectGetClassName, #[doc = "@since 4.1\n\n Casts an Object to a different type.\n\n @param p_object A pointer to the Object.\n @param p_class_tag A pointer uniquely identifying a built-in class in the ClassDB.\n\n @return Returns a pointer to the Object, or NULL if it can't be cast to the requested type."]
    pub object_cast_to: crate::GDExtensionInterfaceObjectCastTo, #[doc = "@since 4.1\n\n Gets an Object by its instance ID.\n\n @param p_instance_id The instance ID.\n\n @return A pointer to the Object."]
    pub object_get_instance_from_id: crate::GDExtensionInterfaceObjectGetInstanceFromId, #[doc = "@since 4.1\n\n Gets the instance ID from an Object.\n\n @param p_object A pointer to the Object.\n\n @return The instance ID."]
    pub object_get_instance_id: crate::GDExtensionInterfaceObjectGetInstanceId, #[doc = "@since 4.3\n\n Checks if this object has a script with the given method.\n\n @param p_object A pointer to the Object.\n @param p_method A pointer to a StringName identifying the method.\n\n @return true if the object has a script and that script has a method with the given name. Returns false if the object has no script."]
    pub object_has_script_method: crate::GDExtensionInterfaceObjectHasScriptMethod, #[doc = "@since 4.3\n\n Call the given script method on this object.\n\n @param p_object A pointer to the Object.\n @param p_method A pointer to a StringName identifying the method.\n @param p_args A pointer to a C array of Variant.\n @param p_argument_count The number of arguments.\n @param r_return A pointer a Variant which will be assigned the return value.\n @param r_error A pointer the structure which will hold error information."]
    pub object_call_script_method: crate::GDExtensionInterfaceObjectCallScriptMethod, #[doc = "@since 4.1\n\n Gets the Object from a reference.\n\n @param p_ref A pointer to the reference.\n\n @return A pointer to the Object from the reference or NULL."]
    pub ref_get_object: crate::GDExtensionInterfaceRefGetObject, #[doc = "@since 4.1\n\n Sets the Object referred to by a reference.\n\n @param p_ref A pointer to the reference.\n @param p_object A pointer to the Object to refer to."]
    pub ref_set_object: crate::GDExtensionInterfaceRefSetObject, #[doc = "@since 4.1\n @deprecated in Godot 4.2. Use `script_instance_create3` instead.\n\n Creates a script instance that contains the given info and instance data.\n\n @param p_info A pointer to a GDExtensionScriptInstanceInfo struct.\n @param p_instance_data A pointer to a data representing the script instance in the GDExtension. This will be passed to all the function pointers on p_info.\n\n @return A pointer to a ScriptInstanceExtension object."]
    pub script_instance_create: crate::GDExtensionInterfaceScriptInstanceCreate, #[doc = "@since 4.2\n @deprecated in Godot 4.3. Use `script_instance_create3` instead.\n\n Creates a script instance that contains the given info and instance data.\n\n @param p_info A pointer to a GDExtensionScriptInstanceInfo2 struct.\n @param p_instance_data A pointer to a data representing the script instance in the GDExtension. This will be passed to all the function pointers on p_info.\n\n @return A pointer to a ScriptInstanceExtension object."]
    pub script_instance_create2: crate::GDExtensionInterfaceScriptInstanceCreate2, #[doc = "@since 4.3\n\n Creates a script instance that contains the given info and instance data.\n\n @param p_info A pointer to a GDExtensionScriptInstanceInfo3 struct.\n @param p_instance_data A pointer to a data representing the script instance in the GDExtension. This will be passed to all the function pointers on p_info.\n\n @return A pointer to a ScriptInstanceExtension object."]
    pub script_instance_create3: crate::GDExtensionInterfaceScriptInstanceCreate3, #[doc = "@since 4.2\n\n Creates a placeholder script instance for a given script and instance.\n\n This interface is optional as a custom placeholder could also be created with script_instance_create().\n\n @param p_language A pointer to a ScriptLanguage.\n @param p_script A pointer to a Script.\n @param p_owner A pointer to an Object.\n\n @return A pointer to a PlaceHolderScriptInstance object."]
    pub placeholder_script_instance_create: crate::GDExtensionInterfacePlaceHolderScriptInstanceCreate, #[doc = "@since 4.2\n\n Updates a placeholder script instance with the given properties and values.\n\n The passed in placeholder must be an instance of PlaceHolderScriptInstance\n such as the one returned by placeholder_script_instance_create().\n\n @param p_placeholder A pointer to a PlaceHolderScriptInstance.\n @param p_properties A pointer to an Array of Dictionary representing PropertyInfo.\n @param p_values A pointer to a Dictionary mapping StringName to Variant values."]
    pub placeholder_script_instance_update: crate::GDExtensionInterfacePlaceHolderScriptInstanceUpdate, #[doc = "@since 4.2\n\n Get the script instance data attached to this object.\n\n @param p_object A pointer to the Object.\n @param p_language A pointer to the language expected for this script instance.\n\n @return A GDExtensionScriptInstanceDataPtr that was attached to this object as part of script_instance_create."]
    pub object_get_script_instance: crate::GDExtensionInterfaceObjectGetScriptInstance, #[doc = "@since 4.5\n\n Set the script instance data attached to this object.\n\n @param p_object A pointer to the Object.\n @param p_script_instance A pointer to the script instance data to attach to this object."]
    pub object_set_script_instance: crate::GDExtensionInterfaceObjectSetScriptInstance, #[doc = "@since 4.2\n @deprecated in Godot 4.3. Use `callable_custom_create2` instead.\n\n Creates a custom Callable object from a function pointer.\n\n Provided struct can be safely freed once the function returns.\n\n @param r_callable A pointer that will receive the new Callable.\n @param p_callable_custom_info The info required to construct a Callable."]
    pub callable_custom_create: crate::GDExtensionInterfaceCallableCustomCreate, #[doc = "@since 4.3\n\n Creates a custom Callable object from a function pointer.\n\n Provided struct can be safely freed once the function returns.\n\n @param r_callable A pointer that will receive the new Callable.\n @param p_callable_custom_info The info required to construct a Callable."]
    pub callable_custom_create2: crate::GDExtensionInterfaceCallableCustomCreate2, #[doc = "@since 4.2\n\n Retrieves the userdata pointer from a custom Callable.\n\n If the Callable is not a custom Callable or the token does not match the one provided to callable_custom_create() via GDExtensionCallableCustomInfo then NULL will be returned.\n\n @param p_callable A pointer to a Callable.\n @param p_token A pointer to an address that uniquely identifies the GDExtension.\n\n @return The userdata pointer given when creating this custom Callable."]
    pub callable_custom_get_userdata: crate::GDExtensionInterfaceCallableCustomGetUserData, #[doc = "@since 4.1\n @deprecated in Godot 4.4. Use `classdb_construct_object2` instead.\n\n Constructs an Object of the requested class.\n\n The passed class must be a built-in godot class, or an already-registered extension class. In both cases, object_set_instance() should be called to fully initialize the object.\n\n @param p_classname A pointer to a StringName with the class name.\n\n @return A pointer to the newly created Object."]
    pub classdb_construct_object: crate::GDExtensionInterfaceClassdbConstructObject, #[doc = "@since 4.4\n\n Constructs an Object of the requested class.\n\n The passed class must be a built-in godot class, or an already-registered extension class. In both cases, object_set_instance() should be called to fully initialize the object.\n\n \"NOTIFICATION_POSTINITIALIZE\" must be sent after construction.\n\n @param p_classname A pointer to a StringName with the class name.\n\n @return A pointer to the newly created Object."]
    pub classdb_construct_object2: crate::GDExtensionInterfaceClassdbConstructObject2, #[doc = "@since 4.1\n\n Gets a pointer to the MethodBind in ClassDB for the given class, method and hash.\n\n @param p_classname A pointer to a StringName with the class name.\n @param p_methodname A pointer to a StringName with the method name.\n @param p_hash A hash representing the function signature.\n\n @return A pointer to the MethodBind from ClassDB."]
    pub classdb_get_method_bind: crate::GDExtensionInterfaceClassdbGetMethodBind, #[doc = "@since 4.1\n\n Gets a pointer uniquely identifying the given built-in class in the ClassDB.\n\n @param p_classname A pointer to a StringName with the class name.\n\n @return A pointer uniquely identifying the built-in class in the ClassDB."]
    pub classdb_get_class_tag: crate::GDExtensionInterfaceClassdbGetClassTag, #[doc = "@since 4.1\n @deprecated in Godot 4.2. Use `classdb_register_extension_class4` instead.\n\n Registers an extension class in the ClassDB.\n\n Provided struct can be safely freed once the function returns.\n\n @param p_library A pointer the library received by the GDExtension's entry point function.\n @param p_class_name A pointer to a StringName with the class name.\n @param p_parent_class_name A pointer to a StringName with the parent class name.\n @param p_extension_funcs A pointer to a GDExtensionClassCreationInfo struct."]
    pub classdb_register_extension_class: crate::GDExtensionInterfaceClassdbRegisterExtensionClass, #[doc = "@since 4.2\n @deprecated in Godot 4.3. Use `classdb_register_extension_class4` instead.\n\n Registers an extension class in the ClassDB.\n\n Provided struct can be safely freed once the function returns.\n\n @param p_library A pointer the library received by the GDExtension's entry point function.\n @param p_class_name A pointer to a StringName with the class name.\n @param p_parent_class_name A pointer to a StringName with the parent class name.\n @param p_extension_funcs A pointer to a GDExtensionClassCreationInfo2 struct."]
    pub classdb_register_extension_class2: crate::GDExtensionInterfaceClassdbRegisterExtensionClass2, #[doc = "@since 4.3\n @deprecated in Godot 4.4. Use `classdb_register_extension_class4` instead.\n\n Registers an extension class in the ClassDB.\n\n Provided struct can be safely freed once the function returns.\n\n @param p_library A pointer the library received by the GDExtension's entry point function.\n @param p_class_name A pointer to a StringName with the class name.\n @param p_parent_class_name A pointer to a StringName with the parent class name.\n @param p_extension_funcs A pointer to a GDExtensionClassCreationInfo3 struct."]
    pub classdb_register_extension_class3: crate::GDExtensionInterfaceClassdbRegisterExtensionClass3, #[doc = "@since 4.4\n @deprecated in Godot 4.5. Use `classdb_register_extension_class5` instead.\n\n Registers an extension class in the ClassDB.\n\n Provided struct can be safely freed once the function returns.\n\n @param p_library A pointer the library received by the GDExtension's entry point function.\n @param p_class_name A pointer to a StringName with the class name.\n @param p_parent_class_name A pointer to a StringName with the parent class name.\n @param p_extension_funcs A pointer to a GDExtensionClassCreationInfo4 struct."]
    pub classdb_register_extension_class4: crate::GDExtensionInterfaceClassdbRegisterExtensionClass4, #[doc = "@since 4.5\n\n Registers an extension class in the ClassDB.\n\n Provided struct can be safely freed once the function returns.\n\n @param p_library A pointer the library received by the GDExtension's entry point function.\n @param p_class_name A pointer to a StringName with the class name.\n @param p_parent_class_name A pointer to a StringName with the parent class name.\n @param p_extension_funcs A pointer to a GDExtensionClassCreationInfo5 struct."]
    pub classdb_register_extension_class5: crate::GDExtensionInterfaceClassdbRegisterExtensionClass5, #[doc = "@since 4.1\n\n Registers a method on an extension class in the ClassDB.\n\n Provided struct can be safely freed once the function returns.\n\n @param p_library A pointer the library received by the GDExtension's entry point function.\n @param p_class_name A pointer to a StringName with the class name.\n @param p_method_info A pointer to a GDExtensionClassMethodInfo struct."]
    pub classdb_register_extension_class_method: crate::GDExtensionInterfaceClassdbRegisterExtensionClassMethod, #[doc = "@since 4.3\n\n Registers a virtual method on an extension class in ClassDB, that can be implemented by scripts or other extensions.\n\n Provided struct can be safely freed once the function returns.\n\n @param p_library A pointer the library received by the GDExtension's entry point function.\n @param p_class_name A pointer to a StringName with the class name.\n @param p_method_info A pointer to a GDExtensionClassMethodInfo struct."]
    pub classdb_register_extension_class_virtual_method: crate::GDExtensionInterfaceClassdbRegisterExtensionClassVirtualMethod, #[doc = "@since 4.1\n\n Registers an integer constant on an extension class in the ClassDB.\n\n Note about registering bitfield values (if p_is_bitfield is true): even though p_constant_value is signed, language bindings are\n advised to treat bitfields as uint64_t, since this is generally clearer and can prevent mistakes like using -1 for setting all bits.\n Language APIs should thus provide an abstraction that registers bitfields (uint64_t) separately from regular constants (int64_t).\n\n @param p_library A pointer the library received by the GDExtension's entry point function.\n @param p_class_name A pointer to a StringName with the class name.\n @param p_enum_name A pointer to a StringName with the enum name.\n @param p_constant_name A pointer to a StringName with the constant name.\n @param p_constant_value The constant value.\n @param p_is_bitfield Whether or not this constant is part of a bitfield."]
    pub classdb_register_extension_class_integer_constant: crate::GDExtensionInterfaceClassdbRegisterExtensionClassIntegerConstant, #[doc = "@since 4.1\n\n Registers a property on an extension class in the ClassDB.\n\n Provided struct can be safely freed once the function returns.\n\n @param p_library A pointer the library received by the GDExtension's entry point function.\n @param p_class_name A pointer to a StringName with the class name.\n @param p_info A pointer to a GDExtensionPropertyInfo struct.\n @param p_setter A pointer to a StringName with the name of the setter method.\n @param p_getter A pointer to a StringName with the name of the getter method."]
    pub classdb_register_extension_class_property: crate::GDExtensionInterfaceClassdbRegisterExtensionClassProperty, #[doc = "@since 4.2\n\n Registers an indexed property on an extension class in the ClassDB.\n\n Provided struct can be safely freed once the function returns.\n\n @param p_library A pointer the library received by the GDExtension's entry point function.\n @param p_class_name A pointer to a StringName with the class name.\n @param p_info A pointer to a GDExtensionPropertyInfo struct.\n @param p_setter A pointer to a StringName with the name of the setter method.\n @param p_getter A pointer to a StringName with the name of the getter method.\n @param p_index The index to pass as the first argument to the getter and setter methods."]
    pub classdb_register_extension_class_property_indexed: crate::GDExtensionInterfaceClassdbRegisterExtensionClassPropertyIndexed, #[doc = "@since 4.1\n\n Registers a property group on an extension class in the ClassDB.\n\n @param p_library A pointer the library received by the GDExtension's entry point function.\n @param p_class_name A pointer to a StringName with the class name.\n @param p_group_name A pointer to a String with the group name.\n @param p_prefix A pointer to a String with the prefix used by properties in this group."]
    pub classdb_register_extension_class_property_group: crate::GDExtensionInterfaceClassdbRegisterExtensionClassPropertyGroup, #[doc = "@since 4.1\n\n Registers a property subgroup on an extension class in the ClassDB.\n\n @param p_library A pointer the library received by the GDExtension's entry point function.\n @param p_class_name A pointer to a StringName with the class name.\n @param p_subgroup_name A pointer to a String with the subgroup name.\n @param p_prefix A pointer to a String with the prefix used by properties in this subgroup."]
    pub classdb_register_extension_class_property_subgroup: crate::GDExtensionInterfaceClassdbRegisterExtensionClassPropertySubgroup, #[doc = "@since 4.1\n\n Registers a signal on an extension class in the ClassDB.\n\n Provided structs can be safely freed once the function returns.\n\n @param p_library A pointer the library received by the GDExtension's entry point function.\n @param p_class_name A pointer to a StringName with the class name.\n @param p_signal_name A pointer to a StringName with the signal name.\n @param p_argument_info A pointer to a GDExtensionPropertyInfo struct.\n @param p_argument_count The number of arguments the signal receives."]
    pub classdb_register_extension_class_signal: crate::GDExtensionInterfaceClassdbRegisterExtensionClassSignal, #[doc = "@since 4.1\n\n Unregisters an extension class in the ClassDB.\n\n Unregistering a parent class before a class that inherits it will result in failure. Inheritors must be unregistered first.\n\n @param p_library A pointer the library received by the GDExtension's entry point function.\n @param p_class_name A pointer to a StringName with the class name."]
    pub classdb_unregister_extension_class: crate::GDExtensionInterfaceClassdbUnregisterExtensionClass, #[doc = "@since 4.1\n\n Gets the path to the current GDExtension library.\n\n @param p_library A pointer the library received by the GDExtension's entry point function.\n @param r_path A pointer to a String which will receive the path."]
    pub get_library_path: crate::GDExtensionInterfaceGetLibraryPath, #[doc = "@since 4.1\n\n Adds an editor plugin.\n\n It's safe to call during initialization.\n\n @param p_class_name A pointer to a StringName with the name of a class (descending from EditorPlugin) which is already registered with ClassDB."]
    pub editor_add_plugin: crate::GDExtensionInterfaceEditorAddPlugin, #[doc = "@since 4.1\n\n Removes an editor plugin.\n\n @param p_class_name A pointer to a StringName with the name of a class that was previously added as an editor plugin."]
    pub editor_remove_plugin: crate::GDExtensionInterfaceEditorRemovePlugin, #[doc = "@since 4.3\n\n Loads new XML-formatted documentation data in the editor.\n\n The provided pointer can be immediately freed once the function returns.\n\n @param p_data A pointer to a UTF-8 encoded C string (null terminated)."]
    pub editor_help_load_xml_from_utf8_chars: crate::GDExtensionsInterfaceEditorHelpLoadXmlFromUtf8Chars, #[doc = "@since 4.3\n\n Loads new XML-formatted documentation data in the editor.\n\n The provided pointer can be immediately freed once the function returns.\n\n @param p_data A pointer to a UTF-8 encoded C string.\n @param p_size The number of bytes (not code units)."]
    pub editor_help_load_xml_from_utf8_chars_and_len: crate::GDExtensionsInterfaceEditorHelpLoadXmlFromUtf8CharsAndLen, #[doc = "@since 4.5\n\n Registers a callback that Godot can call to get the list of all classes (from ClassDB) that may be used by the calling GDExtension.\n\n This is used by the editor to generate a build profile (in \"Tools\" > \"Engine Compilation Configuration Editor...\" > \"Detect from project\"),\n in order to recompile Godot with only the classes used.\n In the provided callback, the GDExtension should provide the list of classes that _may_ be used statically, thus the time of invocation shouldn't matter.\n If a GDExtension doesn't register a callback, Godot will assume that it could be using any classes.\n\n @param p_library A pointer the library received by the GDExtension's entry point function.\n @param p_callback The callback to retrieve the list of classes used."]
    pub editor_register_get_classes_used_callback: crate::GDExtensionInterfaceEditorRegisterGetClassesUsedCallback, #[doc = "@since 4.5\n\n Registers callbacks to be called at different phases of the main loop.\n\n @param p_library A pointer the library received by the GDExtension's entry point function.\n @param p_callbacks A pointer to the structure that contains the callbacks."]
    pub register_main_loop_callbacks: crate::GDExtensionInterfaceRegisterMainLoopCallbacks,
}
impl GDExtensionInterface {
    #[doc = r" # Safety"]
    #[doc = r" - Must be called exactly once during library initialization."]
    #[doc = r" - All parameters (dependencies) must have been initialized and valid."]
    pub(crate) unsafe fn load(get_proc_address: crate::GDExtensionInterfaceGetProcAddress,) -> Self {
        let get_proc_address = get_proc_address.expect("invalid get_proc_address function pointer");
        Self {
            get_godot_version: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceGetGodotVersion > (get_proc_address(crate::c_str(b"get_godot_version\0"))), get_godot_version2: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceGetGodotVersion2 > (get_proc_address(crate::c_str(b"get_godot_version2\0"))), mem_alloc: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceMemAlloc > (get_proc_address(crate::c_str(b"mem_alloc\0"))), mem_realloc: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceMemRealloc > (get_proc_address(crate::c_str(b"mem_realloc\0"))), mem_free: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceMemFree > (get_proc_address(crate::c_str(b"mem_free\0"))), print_error: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePrintError > (get_proc_address(crate::c_str(b"print_error\0"))), print_error_with_message: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePrintErrorWithMessage > (get_proc_address(crate::c_str(b"print_error_with_message\0"))), print_warning: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePrintWarning > (get_proc_address(crate::c_str(b"print_warning\0"))), print_warning_with_message: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePrintWarningWithMessage > (get_proc_address(crate::c_str(b"print_warning_with_message\0"))), print_script_error: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePrintScriptError > (get_proc_address(crate::c_str(b"print_script_error\0"))), print_script_error_with_message: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePrintScriptErrorWithMessage > (get_proc_address(crate::c_str(b"print_script_error_with_message\0"))), get_native_struct_size: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceGetNativeStructSize > (get_proc_address(crate::c_str(b"get_native_struct_size\0"))), variant_new_copy: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantNewCopy > (get_proc_address(crate::c_str(b"variant_new_copy\0"))), variant_new_nil: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantNewNil > (get_proc_address(crate::c_str(b"variant_new_nil\0"))), variant_destroy: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantDestroy > (get_proc_address(crate::c_str(b"variant_destroy\0"))), variant_call: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantCall > (get_proc_address(crate::c_str(b"variant_call\0"))), variant_call_static: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantCallStatic > (get_proc_address(crate::c_str(b"variant_call_static\0"))), variant_evaluate: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantEvaluate > (get_proc_address(crate::c_str(b"variant_evaluate\0"))), variant_set: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantSet > (get_proc_address(crate::c_str(b"variant_set\0"))), variant_set_named: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantSetNamed > (get_proc_address(crate::c_str(b"variant_set_named\0"))), variant_set_keyed: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantSetKeyed > (get_proc_address(crate::c_str(b"variant_set_keyed\0"))), variant_set_indexed: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantSetIndexed > (get_proc_address(crate::c_str(b"variant_set_indexed\0"))), variant_get: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGet > (get_proc_address(crate::c_str(b"variant_get\0"))), variant_get_named: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetNamed > (get_proc_address(crate::c_str(b"variant_get_named\0"))), variant_get_keyed: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetKeyed > (get_proc_address(crate::c_str(b"variant_get_keyed\0"))), variant_get_indexed: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetIndexed > (get_proc_address(crate::c_str(b"variant_get_indexed\0"))), variant_iter_init: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantIterInit > (get_proc_address(crate::c_str(b"variant_iter_init\0"))), variant_iter_next: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantIterNext > (get_proc_address(crate::c_str(b"variant_iter_next\0"))), variant_iter_get: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantIterGet > (get_proc_address(crate::c_str(b"variant_iter_get\0"))), variant_hash: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantHash > (get_proc_address(crate::c_str(b"variant_hash\0"))), variant_recursive_hash: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantRecursiveHash > (get_proc_address(crate::c_str(b"variant_recursive_hash\0"))), variant_hash_compare: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantHashCompare > (get_proc_address(crate::c_str(b"variant_hash_compare\0"))), variant_booleanize: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantBooleanize > (get_proc_address(crate::c_str(b"variant_booleanize\0"))), variant_duplicate: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantDuplicate > (get_proc_address(crate::c_str(b"variant_duplicate\0"))), variant_stringify: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantStringify > (get_proc_address(crate::c_str(b"variant_stringify\0"))), variant_get_type: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetType > (get_proc_address(crate::c_str(b"variant_get_type\0"))), variant_has_method: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantHasMethod > (get_proc_address(crate::c_str(b"variant_has_method\0"))), variant_has_member: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantHasMember > (get_proc_address(crate::c_str(b"variant_has_member\0"))), variant_has_key: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantHasKey > (get_proc_address(crate::c_str(b"variant_has_key\0"))), variant_get_object_instance_id: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetObjectInstanceId > (get_proc_address(crate::c_str(b"variant_get_object_instance_id\0"))), variant_get_type_name: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetTypeName > (get_proc_address(crate::c_str(b"variant_get_type_name\0"))), variant_can_convert: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantCanConvert > (get_proc_address(crate::c_str(b"variant_can_convert\0"))), variant_can_convert_strict: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantCanConvertStrict > (get_proc_address(crate::c_str(b"variant_can_convert_strict\0"))), get_variant_from_type_constructor: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceGetVariantFromTypeConstructor > (get_proc_address(crate::c_str(b"get_variant_from_type_constructor\0"))), get_variant_to_type_constructor: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceGetVariantToTypeConstructor > (get_proc_address(crate::c_str(b"get_variant_to_type_constructor\0"))), variant_get_ptr_internal_getter: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceGetVariantGetInternalPtrFunc > (get_proc_address(crate::c_str(b"variant_get_ptr_internal_getter\0"))), variant_get_ptr_operator_evaluator: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetPtrOperatorEvaluator > (get_proc_address(crate::c_str(b"variant_get_ptr_operator_evaluator\0"))), variant_get_ptr_builtin_method: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetPtrBuiltinMethod > (get_proc_address(crate::c_str(b"variant_get_ptr_builtin_method\0"))), variant_get_ptr_constructor: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetPtrConstructor > (get_proc_address(crate::c_str(b"variant_get_ptr_constructor\0"))), variant_get_ptr_destructor: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetPtrDestructor > (get_proc_address(crate::c_str(b"variant_get_ptr_destructor\0"))), variant_construct: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantConstruct > (get_proc_address(crate::c_str(b"variant_construct\0"))), variant_get_ptr_setter: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetPtrSetter > (get_proc_address(crate::c_str(b"variant_get_ptr_setter\0"))), variant_get_ptr_getter: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetPtrGetter > (get_proc_address(crate::c_str(b"variant_get_ptr_getter\0"))), variant_get_ptr_indexed_setter: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetPtrIndexedSetter > (get_proc_address(crate::c_str(b"variant_get_ptr_indexed_setter\0"))), variant_get_ptr_indexed_getter: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetPtrIndexedGetter > (get_proc_address(crate::c_str(b"variant_get_ptr_indexed_getter\0"))), variant_get_ptr_keyed_setter: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetPtrKeyedSetter > (get_proc_address(crate::c_str(b"variant_get_ptr_keyed_setter\0"))), variant_get_ptr_keyed_getter: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetPtrKeyedGetter > (get_proc_address(crate::c_str(b"variant_get_ptr_keyed_getter\0"))), variant_get_ptr_keyed_checker: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetPtrKeyedChecker > (get_proc_address(crate::c_str(b"variant_get_ptr_keyed_checker\0"))), variant_get_constant_value: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetConstantValue > (get_proc_address(crate::c_str(b"variant_get_constant_value\0"))), variant_get_ptr_utility_function: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceVariantGetPtrUtilityFunction > (get_proc_address(crate::c_str(b"variant_get_ptr_utility_function\0"))), string_new_with_latin1_chars: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringNewWithLatin1Chars > (get_proc_address(crate::c_str(b"string_new_with_latin1_chars\0"))), string_new_with_utf8_chars: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringNewWithUtf8Chars > (get_proc_address(crate::c_str(b"string_new_with_utf8_chars\0"))), string_new_with_utf16_chars: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringNewWithUtf16Chars > (get_proc_address(crate::c_str(b"string_new_with_utf16_chars\0"))), string_new_with_utf32_chars: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringNewWithUtf32Chars > (get_proc_address(crate::c_str(b"string_new_with_utf32_chars\0"))), string_new_with_wide_chars: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringNewWithWideChars > (get_proc_address(crate::c_str(b"string_new_with_wide_chars\0"))), string_new_with_latin1_chars_and_len: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringNewWithLatin1CharsAndLen > (get_proc_address(crate::c_str(b"string_new_with_latin1_chars_and_len\0"))), string_new_with_utf8_chars_and_len: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringNewWithUtf8CharsAndLen > (get_proc_address(crate::c_str(b"string_new_with_utf8_chars_and_len\0"))), string_new_with_utf8_chars_and_len2: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringNewWithUtf8CharsAndLen2 > (get_proc_address(crate::c_str(b"string_new_with_utf8_chars_and_len2\0"))), string_new_with_utf16_chars_and_len: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringNewWithUtf16CharsAndLen > (get_proc_address(crate::c_str(b"string_new_with_utf16_chars_and_len\0"))), string_new_with_utf16_chars_and_len2: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringNewWithUtf16CharsAndLen2 > (get_proc_address(crate::c_str(b"string_new_with_utf16_chars_and_len2\0"))), string_new_with_utf32_chars_and_len: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringNewWithUtf32CharsAndLen > (get_proc_address(crate::c_str(b"string_new_with_utf32_chars_and_len\0"))), string_new_with_wide_chars_and_len: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringNewWithWideCharsAndLen > (get_proc_address(crate::c_str(b"string_new_with_wide_chars_and_len\0"))), string_to_latin1_chars: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringToLatin1Chars > (get_proc_address(crate::c_str(b"string_to_latin1_chars\0"))), string_to_utf8_chars: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringToUtf8Chars > (get_proc_address(crate::c_str(b"string_to_utf8_chars\0"))), string_to_utf16_chars: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringToUtf16Chars > (get_proc_address(crate::c_str(b"string_to_utf16_chars\0"))), string_to_utf32_chars: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringToUtf32Chars > (get_proc_address(crate::c_str(b"string_to_utf32_chars\0"))), string_to_wide_chars: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringToWideChars > (get_proc_address(crate::c_str(b"string_to_wide_chars\0"))), string_operator_index: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringOperatorIndex > (get_proc_address(crate::c_str(b"string_operator_index\0"))), string_operator_index_const: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringOperatorIndexConst > (get_proc_address(crate::c_str(b"string_operator_index_const\0"))), string_operator_plus_eq_string: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringOperatorPlusEqString > (get_proc_address(crate::c_str(b"string_operator_plus_eq_string\0"))), string_operator_plus_eq_char: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringOperatorPlusEqChar > (get_proc_address(crate::c_str(b"string_operator_plus_eq_char\0"))), string_operator_plus_eq_cstr: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringOperatorPlusEqCstr > (get_proc_address(crate::c_str(b"string_operator_plus_eq_cstr\0"))), string_operator_plus_eq_wcstr: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringOperatorPlusEqWcstr > (get_proc_address(crate::c_str(b"string_operator_plus_eq_wcstr\0"))), string_operator_plus_eq_c32str: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringOperatorPlusEqC32str > (get_proc_address(crate::c_str(b"string_operator_plus_eq_c32str\0"))), string_resize: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringResize > (get_proc_address(crate::c_str(b"string_resize\0"))), string_name_new_with_latin1_chars: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringNameNewWithLatin1Chars > (get_proc_address(crate::c_str(b"string_name_new_with_latin1_chars\0"))), string_name_new_with_utf8_chars: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringNameNewWithUtf8Chars > (get_proc_address(crate::c_str(b"string_name_new_with_utf8_chars\0"))), string_name_new_with_utf8_chars_and_len: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceStringNameNewWithUtf8CharsAndLen > (get_proc_address(crate::c_str(b"string_name_new_with_utf8_chars_and_len\0"))), xml_parser_open_buffer: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceXmlParserOpenBuffer > (get_proc_address(crate::c_str(b"xml_parser_open_buffer\0"))), file_access_store_buffer: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceFileAccessStoreBuffer > (get_proc_address(crate::c_str(b"file_access_store_buffer\0"))), file_access_get_buffer: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceFileAccessGetBuffer > (get_proc_address(crate::c_str(b"file_access_get_buffer\0"))), image_ptrw: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceImagePtrw > (get_proc_address(crate::c_str(b"image_ptrw\0"))), image_ptr: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceImagePtr > (get_proc_address(crate::c_str(b"image_ptr\0"))), worker_thread_pool_add_native_group_task: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceWorkerThreadPoolAddNativeGroupTask > (get_proc_address(crate::c_str(b"worker_thread_pool_add_native_group_task\0"))), worker_thread_pool_add_native_task: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceWorkerThreadPoolAddNativeTask > (get_proc_address(crate::c_str(b"worker_thread_pool_add_native_task\0"))), packed_byte_array_operator_index: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedByteArrayOperatorIndex > (get_proc_address(crate::c_str(b"packed_byte_array_operator_index\0"))), packed_byte_array_operator_index_const: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedByteArrayOperatorIndexConst > (get_proc_address(crate::c_str(b"packed_byte_array_operator_index_const\0"))), packed_float32_array_operator_index: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedFloat32ArrayOperatorIndex > (get_proc_address(crate::c_str(b"packed_float32_array_operator_index\0"))), packed_float32_array_operator_index_const: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedFloat32ArrayOperatorIndexConst > (get_proc_address(crate::c_str(b"packed_float32_array_operator_index_const\0"))), packed_float64_array_operator_index: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedFloat64ArrayOperatorIndex > (get_proc_address(crate::c_str(b"packed_float64_array_operator_index\0"))), packed_float64_array_operator_index_const: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedFloat64ArrayOperatorIndexConst > (get_proc_address(crate::c_str(b"packed_float64_array_operator_index_const\0"))), packed_int32_array_operator_index: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedInt32ArrayOperatorIndex > (get_proc_address(crate::c_str(b"packed_int32_array_operator_index\0"))), packed_int32_array_operator_index_const: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedInt32ArrayOperatorIndexConst > (get_proc_address(crate::c_str(b"packed_int32_array_operator_index_const\0"))), packed_int64_array_operator_index: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedInt64ArrayOperatorIndex > (get_proc_address(crate::c_str(b"packed_int64_array_operator_index\0"))), packed_int64_array_operator_index_const: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedInt64ArrayOperatorIndexConst > (get_proc_address(crate::c_str(b"packed_int64_array_operator_index_const\0"))), packed_string_array_operator_index: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedStringArrayOperatorIndex > (get_proc_address(crate::c_str(b"packed_string_array_operator_index\0"))), packed_string_array_operator_index_const: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedStringArrayOperatorIndexConst > (get_proc_address(crate::c_str(b"packed_string_array_operator_index_const\0"))), packed_vector2_array_operator_index: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedVector2ArrayOperatorIndex > (get_proc_address(crate::c_str(b"packed_vector2_array_operator_index\0"))), packed_vector2_array_operator_index_const: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedVector2ArrayOperatorIndexConst > (get_proc_address(crate::c_str(b"packed_vector2_array_operator_index_const\0"))), packed_vector3_array_operator_index: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedVector3ArrayOperatorIndex > (get_proc_address(crate::c_str(b"packed_vector3_array_operator_index\0"))), packed_vector3_array_operator_index_const: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedVector3ArrayOperatorIndexConst > (get_proc_address(crate::c_str(b"packed_vector3_array_operator_index_const\0"))), packed_vector4_array_operator_index: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedVector4ArrayOperatorIndex > (get_proc_address(crate::c_str(b"packed_vector4_array_operator_index\0"))), packed_vector4_array_operator_index_const: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedVector4ArrayOperatorIndexConst > (get_proc_address(crate::c_str(b"packed_vector4_array_operator_index_const\0"))), packed_color_array_operator_index: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedColorArrayOperatorIndex > (get_proc_address(crate::c_str(b"packed_color_array_operator_index\0"))), packed_color_array_operator_index_const: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePackedColorArrayOperatorIndexConst > (get_proc_address(crate::c_str(b"packed_color_array_operator_index_const\0"))), array_operator_index: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceArrayOperatorIndex > (get_proc_address(crate::c_str(b"array_operator_index\0"))), array_operator_index_const: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceArrayOperatorIndexConst > (get_proc_address(crate::c_str(b"array_operator_index_const\0"))), array_ref: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceArrayRef > (get_proc_address(crate::c_str(b"array_ref\0"))), array_set_typed: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceArraySetTyped > (get_proc_address(crate::c_str(b"array_set_typed\0"))), dictionary_operator_index: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceDictionaryOperatorIndex > (get_proc_address(crate::c_str(b"dictionary_operator_index\0"))), dictionary_operator_index_const: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceDictionaryOperatorIndexConst > (get_proc_address(crate::c_str(b"dictionary_operator_index_const\0"))), dictionary_set_typed: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceDictionarySetTyped > (get_proc_address(crate::c_str(b"dictionary_set_typed\0"))), object_method_bind_call: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceObjectMethodBindCall > (get_proc_address(crate::c_str(b"object_method_bind_call\0"))), object_method_bind_ptrcall: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceObjectMethodBindPtrcall > (get_proc_address(crate::c_str(b"object_method_bind_ptrcall\0"))), object_destroy: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceObjectDestroy > (get_proc_address(crate::c_str(b"object_destroy\0"))), global_get_singleton: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceGlobalGetSingleton > (get_proc_address(crate::c_str(b"global_get_singleton\0"))), object_get_instance_binding: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceObjectGetInstanceBinding > (get_proc_address(crate::c_str(b"object_get_instance_binding\0"))), object_set_instance_binding: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceObjectSetInstanceBinding > (get_proc_address(crate::c_str(b"object_set_instance_binding\0"))), object_free_instance_binding: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceObjectFreeInstanceBinding > (get_proc_address(crate::c_str(b"object_free_instance_binding\0"))), object_set_instance: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceObjectSetInstance > (get_proc_address(crate::c_str(b"object_set_instance\0"))), object_get_class_name: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceObjectGetClassName > (get_proc_address(crate::c_str(b"object_get_class_name\0"))), object_cast_to: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceObjectCastTo > (get_proc_address(crate::c_str(b"object_cast_to\0"))), object_get_instance_from_id: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceObjectGetInstanceFromId > (get_proc_address(crate::c_str(b"object_get_instance_from_id\0"))), object_get_instance_id: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceObjectGetInstanceId > (get_proc_address(crate::c_str(b"object_get_instance_id\0"))), object_has_script_method: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceObjectHasScriptMethod > (get_proc_address(crate::c_str(b"object_has_script_method\0"))), object_call_script_method: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceObjectCallScriptMethod > (get_proc_address(crate::c_str(b"object_call_script_method\0"))), ref_get_object: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceRefGetObject > (get_proc_address(crate::c_str(b"ref_get_object\0"))), ref_set_object: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceRefSetObject > (get_proc_address(crate::c_str(b"ref_set_object\0"))), script_instance_create: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceScriptInstanceCreate > (get_proc_address(crate::c_str(b"script_instance_create\0"))), script_instance_create2: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceScriptInstanceCreate2 > (get_proc_address(crate::c_str(b"script_instance_create2\0"))), script_instance_create3: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceScriptInstanceCreate3 > (get_proc_address(crate::c_str(b"script_instance_create3\0"))), placeholder_script_instance_create: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePlaceHolderScriptInstanceCreate > (get_proc_address(crate::c_str(b"placeholder_script_instance_create\0"))), placeholder_script_instance_update: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfacePlaceHolderScriptInstanceUpdate > (get_proc_address(crate::c_str(b"placeholder_script_instance_update\0"))), object_get_script_instance: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceObjectGetScriptInstance > (get_proc_address(crate::c_str(b"object_get_script_instance\0"))), object_set_script_instance: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceObjectSetScriptInstance > (get_proc_address(crate::c_str(b"object_set_script_instance\0"))), callable_custom_create: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceCallableCustomCreate > (get_proc_address(crate::c_str(b"callable_custom_create\0"))), callable_custom_create2: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceCallableCustomCreate2 > (get_proc_address(crate::c_str(b"callable_custom_create2\0"))), callable_custom_get_userdata: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceCallableCustomGetUserData > (get_proc_address(crate::c_str(b"callable_custom_get_userdata\0"))), classdb_construct_object: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceClassdbConstructObject > (get_proc_address(crate::c_str(b"classdb_construct_object\0"))), classdb_construct_object2: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceClassdbConstructObject2 > (get_proc_address(crate::c_str(b"classdb_construct_object2\0"))), classdb_get_method_bind: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceClassdbGetMethodBind > (get_proc_address(crate::c_str(b"classdb_get_method_bind\0"))), classdb_get_class_tag: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceClassdbGetClassTag > (get_proc_address(crate::c_str(b"classdb_get_class_tag\0"))), classdb_register_extension_class: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceClassdbRegisterExtensionClass > (get_proc_address(crate::c_str(b"classdb_register_extension_class\0"))), classdb_register_extension_class2: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceClassdbRegisterExtensionClass2 > (get_proc_address(crate::c_str(b"classdb_register_extension_class2\0"))), classdb_register_extension_class3: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceClassdbRegisterExtensionClass3 > (get_proc_address(crate::c_str(b"classdb_register_extension_class3\0"))), classdb_register_extension_class4: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceClassdbRegisterExtensionClass4 > (get_proc_address(crate::c_str(b"classdb_register_extension_class4\0"))), classdb_register_extension_class5: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceClassdbRegisterExtensionClass5 > (get_proc_address(crate::c_str(b"classdb_register_extension_class5\0"))), classdb_register_extension_class_method: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceClassdbRegisterExtensionClassMethod > (get_proc_address(crate::c_str(b"classdb_register_extension_class_method\0"))), classdb_register_extension_class_virtual_method: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceClassdbRegisterExtensionClassVirtualMethod > (get_proc_address(crate::c_str(b"classdb_register_extension_class_virtual_method\0"))), classdb_register_extension_class_integer_constant: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceClassdbRegisterExtensionClassIntegerConstant > (get_proc_address(crate::c_str(b"classdb_register_extension_class_integer_constant\0"))), classdb_register_extension_class_property: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceClassdbRegisterExtensionClassProperty > (get_proc_address(crate::c_str(b"classdb_register_extension_class_property\0"))), classdb_register_extension_class_property_indexed: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceClassdbRegisterExtensionClassPropertyIndexed > (get_proc_address(crate::c_str(b"classdb_register_extension_class_property_indexed\0"))), classdb_register_extension_class_property_group: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceClassdbRegisterExtensionClassPropertyGroup > (get_proc_address(crate::c_str(b"classdb_register_extension_class_property_group\0"))), classdb_register_extension_class_property_subgroup: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceClassdbRegisterExtensionClassPropertySubgroup > (get_proc_address(crate::c_str(b"classdb_register_extension_class_property_subgroup\0"))), classdb_register_extension_class_signal: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceClassdbRegisterExtensionClassSignal > (get_proc_address(crate::c_str(b"classdb_register_extension_class_signal\0"))), classdb_unregister_extension_class: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceClassdbUnregisterExtensionClass > (get_proc_address(crate::c_str(b"classdb_unregister_extension_class\0"))), get_library_path: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceGetLibraryPath > (get_proc_address(crate::c_str(b"get_library_path\0"))), editor_add_plugin: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceEditorAddPlugin > (get_proc_address(crate::c_str(b"editor_add_plugin\0"))), editor_remove_plugin: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceEditorRemovePlugin > (get_proc_address(crate::c_str(b"editor_remove_plugin\0"))), editor_help_load_xml_from_utf8_chars: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionsInterfaceEditorHelpLoadXmlFromUtf8Chars > (get_proc_address(crate::c_str(b"editor_help_load_xml_from_utf8_chars\0"))), editor_help_load_xml_from_utf8_chars_and_len: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionsInterfaceEditorHelpLoadXmlFromUtf8CharsAndLen > (get_proc_address(crate::c_str(b"editor_help_load_xml_from_utf8_chars_and_len\0"))), editor_register_get_classes_used_callback: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceEditorRegisterGetClassesUsedCallback > (get_proc_address(crate::c_str(b"editor_register_get_classes_used_callback\0"))), register_main_loop_callbacks: std::mem::transmute::< crate::GDExtensionInterfaceFunctionPtr, crate::GDExtensionInterfaceRegisterMainLoopCallbacks > (get_proc_address(crate::c_str(b"register_main_loop_callbacks\0"))),
        }
    }
}